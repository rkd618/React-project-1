#    Jsx - Is not HTML in Js ,Jsx is like a HTML not a HTML 
# html like Syntax (Jsx is more closer to XML)

const heading = () => {
    return <h1>Hellow React<h1/> ;
}

const Heading = () => (<h1>Hellow React</h1>)

# jsx sort the html tag like br etc
</title>  == <title></title>

Ep- 1to3
const heading = React.createElement("h1", {id: "heading"}, "Hello World From React!");
const Paragraph = React.createElement("h1", {id: "Paragraph"}, "Rendering the wrong World!!");
const root = ReactDom.createRoot(document.getElementById("root"));
root.render(Paragraph)

# useState  function does not neet to return because we dont need any value or calculation just for some functionality

**Wire Frame**
*Headder
   - logo 
   - Nav link
   - Register/Login
*Body
    - Search
        - Resturant container
        - Resturant Card
         -img
         -Name of rest , Rating , cuisine, etc
*Footer
    - Copyright
    - Links
    - Address
    - Contact

# we can write css in form of similar to function and call it in form of  style={styleCard}
    const styleCard = {
        backgroundColor: "white"
    }
# conflict driven UI (for the diffrent place diffrent UI can be)

# https://www.swiggy.com/mapi/homepage/getCards?lat=19.07480&lng=72.88560

# not using keys (not acceptable) <<<<< unique id(best practise)

# There are 2 Export one is Default and another one is Name

# -Dafault Export/Import
export dafault components
import components from "path";

# -Named Export/Import
export const Components;
import {component} from "path";

# whenever varible changed components rerender in the react

# React Fibre came in React 16 version 
# system design 
Monolithic - all stuff in the one repository like database, API, utilities, service
microservice - for each have a diffrent reposetries all are indepent with each other
# React- always first skelton and body load after that API call occured 
# Featch is a Browser Property to fetch the  API
Summary:
The description of React's rendering process is mostly correct, though server-side rendering can change the behavior slightly.
The fetch statement is correct.

# in below casefirst restlist come then from api data is come 
const [listofRestaurants, setListofRestaurants] = useState(restlist);

# //if no dependency array => useEffect is called on every render.

 # //if dependency array is Empty = [] => useEffect is called on initial render (just once).
 ## if there is any array dependency [searchtext] =>  now every time only searchtext updates
  useEffect(() => {
    fetchData();
  }, [searchtext]);

// Shortcut = rafce + enter

There are 2 types of Routing- 
# client side routing
# Server side routing

#menu card Api card - 
https://www.swiggy.com/mapi/homepage/getCards?lat=19.2113806&lng=72.8570866
https://www.swiggy.com/mapi/menu/pl?page-type=REGULAR_MENU&complete-menu=true&lat=19.2113806&lng=72.8570866&restaurantId=579195&submitAction=ENTER